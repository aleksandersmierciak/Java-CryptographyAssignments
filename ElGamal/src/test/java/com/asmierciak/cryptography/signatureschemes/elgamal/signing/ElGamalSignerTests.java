package com.asmierciak.cryptography.signatureschemes.elgamal.signing;

import com.asmierciak.cryptography.signatureschemes.elgamal.keys.ElGamalPrivateKey;
import com.asmierciak.cryptography.signatureschemes.elgamal.keys.ElGamalPublicKey;
import com.asmierciak.cryptography.signatureschemes.signing.SignatureSigner;
import com.asmierciak.cryptography.util.ascii.AsciiEncoder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

@RunWith(Parameterized.class)
public class ElGamalSignerTests {
    private final ElGamalPublicKey publicKey;

    private final ElGamalSignature signature;

    public ElGamalSignerTests(ElGamalPublicKey publicKey, ElGamalPrivateKey privateKey, BigInteger input) {
        this.publicKey = publicKey;

        ElGamalSigner signer = new ElGamalSigner(publicKey, privateKey);
        signer.generateSignature(input);
        signature = signer.getSignature();
    }

    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        ElGamalPublicKey smallPublicKey = new ElGamalPublicKey(BigInteger.valueOf(4663), BigInteger.valueOf(3605), BigInteger.valueOf(3831));
        ElGamalPublicKey mediumPublicKey = new ElGamalPublicKey(
                new BigInteger("1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413"),
                new BigInteger("178530505861634674756617917210668419492586289623607229616955011560049646148685373630841737744868677832680706866777032422627596011085224463063903982759011429881144684069684685659195817399528287283642149768373178525608379048644428023"),
                new BigInteger("297862634128839561820402180654517022749165787047341397566874391927082725619027197086037627933750271813515457359699153060665365820233656809052566400659870364763803093273626657949480173367041904711393216626086558798205621377354236130"));
        ElGamalPublicKey largePublicKey = new ElGamalPublicKey(
                new BigInteger("25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357"),
                new BigInteger("18789957311924561760526805272785424944057085730458773402275465940540323552805751563430721740457676003798173526039653032794281801942953763267142126746774890756416198629885878187789263002494817616098863121036833390546140448772320449751113731841213453920827290513126545699209078860612928528325394498131619029845973843354234496451032224138369280774678975117256745445563787188500487434535290199252720632542189527654992199772077420440758759385536889480423511224973137723928488445417055438703194990104611951002494247783905974296441628215417570301108843660486107622454097248849535217576097110562042211090476349569401352960062"),
                new BigInteger("13877807406642923092457670827505860645542644049211917860891480785029816764584728533650329535449273631937286879409218802551914658843912530079033225091042327886809549634210248670873623227794290535543766606334786977341613911033377831761749439965395220042931960034647925113674475964451425575389627602068061710380562594811467258231203416172231945296044344892922621424593987132998252004038368667752086162912968790800041795401090962741396677140098965366542269336768268162734667071371347553852424927982004531354113171206225882912281237957922411604221568343334472627805712715359230434748455375292424912879430440098611814868222"));

        ElGamalPrivateKey smallPrivateKey = new ElGamalPrivateKey(BigInteger.valueOf(3483));
        ElGamalPrivateKey mediumPrivateKey = new ElGamalPrivateKey(
                new BigInteger("661944845495209522864995554116801403715510468598103022692870372736622573217856168486701594757698400214036478256431126205338733056845251025013547291385426218188456399324643579064789503397068595143994947371823059148043848605922987780"));
        ElGamalPrivateKey largePrivateKey = new ElGamalPrivateKey(
                new BigInteger("17388175790741098012599321772972000609109610143884238628474119183464639444925890568715236356487553681135495353119725972000613512982186192611914576693290710113118642002304216688777549874070005149995795428878224353427856852057795574305673169468330360472113745956424800619537196979009606249726771589284710565327718118663897447846140194368622109429841660092469573032974363373909837906105400795287573021231012299765723233460239694305603805373600503876333198788970649505251286576389884162569775387170299146789553007210582359600593275498534723667197998910852093708768734640242174059378044155762408604480366167489028359436604"));

        // "Ala ma kota"
        // BigInteger message1 = new BigInteger("79091985525906541409956961");
        BigInteger message1 = new AsciiEncoder().encode("43fd70009a97a7d311c5644047ccc700f8d08a9d"); // "79091985525906541409956961"
        // "The quick brown fox jumps over the lazy dog"
        // BigInteger message2 = new BigInteger("11815744420664747200359014215611078249874077418792906203758916158211866334739307190174417697959789752167");
        BigInteger message2 = new AsciiEncoder().encode("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"); // "11815744420664747200359014215611078249874077418792906203758916158211866334739307190174417697959789752167"
        // "Zażółć gęślą jaźń"
        // BigInteger message3 = new BigInteger("30756326165500277537644814179649104018244");
        BigInteger message3 = new AsciiEncoder().encode("839b3ecd39c5ac4118a24e3ebee3401b0f62d1fc"); // "30756326165500277537644814179649104018244"

        // Test case data found below are
        // valid ElGamal public and private keys
        // and a message decoded using AsciiDecoder.
        Object[][] data = new Object[][]
                {
                        { smallPublicKey, smallPrivateKey, message1 },
                        { smallPublicKey, smallPrivateKey, message2 },
                        { smallPublicKey, smallPrivateKey, message3 },

                        { mediumPublicKey, mediumPrivateKey, message1 },
                        { mediumPublicKey, mediumPrivateKey, message2 },
                        { mediumPublicKey, mediumPrivateKey, message3 },

                        { largePublicKey, largePrivateKey, message1 },
                        { largePublicKey, largePrivateKey, message2 },
                        { largePublicKey, largePrivateKey, message3 },
                };
        return Arrays.asList(data);
    }

    @Test (expected = IllegalArgumentException.class)
    public void testThrowsIfPublicKeyIsNull() {
        new ElGamalSigner(
                null,
                new ElGamalPrivateKey(BigInteger.ZERO));
    }

    @Test (expected = IllegalArgumentException.class)
    public void testThrowsIfPrivateKeyIsNull() {
        new ElGamalSigner(
                new ElGamalPublicKey(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO),
                null);
    }

    @Test (expected = IllegalArgumentException.class)
    public void testThrowsIfInputIsNull() {
        SignatureSigner signer = new ElGamalSigner(
                new ElGamalPublicKey(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO),
                new ElGamalPrivateKey(BigInteger.ZERO));
        signer.generateSignature(null);
    }

    @Test
    public void testSignatureIsNotNull() {
        assertThat(signature, is(notNullValue()));
    }

    @Test
    public void testSignatureRIsInValidRange() {
        assertThat(signature.getR(), is(both(greaterThan(BigInteger.ZERO)).and(lessThan(publicKey.getP()))));
    }

    @Test
    public void testSignatureSIsInValidRange() {
        assertThat(signature.getS(), is(both(greaterThan(BigInteger.ZERO)).and(lessThan(publicKey.getP().subtract(BigInteger.ONE)))));
    }
}
